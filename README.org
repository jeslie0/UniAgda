#+title: Univalent Agda
#+author: James Leslie
* Definitions
** Identity types
We use "_‚â°_" notation for the identity type, with "refl" begin reflexivity. The symbol is given by "\==" in Agda.
*** Groupoid structure
**** [[file:UniAgda/core/primitives.agda::_^ : {i : Level} {A : Type i} {x y : A}][Inverse]]
We use "p ^" to denote the inverse of a path p. 
**** [[file:UniAgda/core/primitives.agda::_‚àò_ : {i : Level} {A : Type i} {x y z : A}][Concatenation]]
We use "p ‚àò q" to denote the concatenation of paths p and q. The symbol is given by "\o" in Agda.
*** Ap and transport
**** [[file:UniAgda/core/primitives.agda::ap : {i j : Level} {A : Type i} {B : Type j} {x y : A}][Application on paths]]
- "ap f p" or "f [ p ]".
- We use "apD f p" for dependant ap.
**** [[file:UniAgda/core/primitives.agda::transport : {i j : Level} {A : Type i} {x y : A}][Transport]] 
- We use either "transport P p u" or "p # u" for transport, but the latter often has issues determining the type family for some reason.
** Sigma types
We use the notation "Œ£[ x ‚àà A ] B". Product types are defined to be a special case of the sigma type, meaning we don't need to define everything twice.

Terms are defined by "(a , b)"

We have "pr‚ÇÅ" and "pr‚ÇÇ" for the projections (given by "pr\_1" and "pr\_2", respectively).
** Coproduct types
Coproducts are defined as "A + B", with term formers "inl" and "inr".
** Unit Type
The unit type is called "Unit", or "ùüô", with "tt" as the term.
** Empty Type
We use "Empty" or "ùüò" for the empty type. The symbol "¬¨" is used for negation.
** Booleans
We use "Bool", with "true" and "false" as terms.
** Natural numbers
The natural numbers are "‚Ñï" with "zero" and "suc" as term builders. This is linked with Agda's builtin natural numbers, so we can use ordinary numberals, rather than having to apply the successor over and over.
* Naming conventions
There are rough naming conventions that I try to follow.
- types which are propositions should be named by starting with the prefix "is", then a capitalised word. For example: "isProp" and "isSet". The witnesses to them being propositions are then "isProp-is-prop" and "isSet-is-prop".
- TODO add more conventions.
* Tips and tricks
** Equivalences
- Use "equiv-adjointify" to reduce proving an equivalence to proving a quasi-equivalence.
- Use "isequiv-adjointify" to reduce proving a certain function is an equivalence, to proving it is a quasi-equivalence.
** Sigma-types
- use "path-equiv-sigma" to reduce proving a path in a sigma type to a dependant pair of paths. Its inverse is given by "path-sigma".
- use "path-equiv-prod" to reduce proving a path in a product type to a pair of paths. Its inverse is given by "path-prod"
** Path-algebra
- most lemmas for manipulation of paths are in "UniAgda.core.pathalgebra". They typically follow the form "pq=r-to-p=rq^", always starting with paths "p", "q", "r".

* Current goals
- Need to finish proofs in Equivalences, in particular, need to prove the following: (Equivalences will need to be tidied up)
  + [-] Sections:
    + [X] 4.6
    + [ ] 4.7
      + [ ] Lemma 4.7.3
    + [ ] 4.8
  + [-] Section 2.15 - universal properties
    + [X] Finished Thm2.15.7
    + [ ] Finish pullbacks
  + [ ] Define horizontal composition of natural transformations, and whiskering.
  + [ ] Category Theory
    - [ ] Theorem 9.2.5
    - [ ] Definition 9.2.7
    - [ ] Lemma 9.2.8
    - [ ] Lemma 9.2.9
    - [ ] Lemma 9.2.10
    - [ ] Lemma 9.2.11
    - [ ] Lemma 9.3.2
    - [ ] Lemma 9.4.2
    - [ ] [[file:UniAgda/categories/equivalences.lagda.org::*Fully faithful, essentially surjective][Lemma 9.4.5]]
    - [ ] [[file:UniAgda/categories/equivalences.lagda.org][Weak equivalence is a prop]]

- Add in n-types.
- Add in some more HITs - in particular n-truncation
- Refactor path-algebra names. Make more consistent.

* Refactoring notes
- [ ] Change "^" to "\(^{-1}\)" using unicode?
- [ ] Need to decide on how to present results about fibres of type families being props and sets and 1-types

* Conversion progress
** Core
- [ ] PropSetProperties
  - Mostly done. Needs tidying up in Logic/Equiv section.
- [ ] HITs
  - In literate form, needs to actually be made literate though.
- [ ] Inj-Surj
- [ ] Logic

