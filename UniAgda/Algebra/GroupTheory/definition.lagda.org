#+title: Basic results in group theory
#+author: James Leslie

* Prelude
#+begin_src agda2
{-# OPTIONS --without-K #-}
module UniAgda.Algebra.GroupTheory.definition where

open import UniAgda.core.CORE public
#+end_src

* Group definition
#+begin_src agda2
record group {i : Level} : Type (lsuc i) where
  eta-equality
  field
    carrier : Type i
    op : carrier → carrier → carrier
    _^ᵍ : carrier → carrier
    e : carrier

    carrier-set : isSet carrier
    gp-assoc : (a b c : carrier) → op (op a b) c ≡ op a (op b c)
    gp-lId : (a : carrier) → op e a ≡ a
    gp-rId : (a : carrier) → op a e ≡ a
    gp-lInv : (a : carrier) → op (a ^ᵍ) (a) ≡ e
    gp-rInv : (a : carrier) → op a (a ^ᵍ) ≡ e

  
  _og_ : carrier → carrier → carrier
  _og_ = op
#+end_src
#+begin_src agda2

  {- The identity is unique -}
  e-unique : (X : Σ[ e' ∈ carrier ] (
             ((a : carrier) → op e' a ≡ a) × (
             ((a : carrier) → op a e' ≡ a) × (
             ((a : carrier) → op (a ^ᵍ) (a) ≡ e) × (
             ((a : carrier) → op (a ^ᵍ) (a) ≡ e))))))
             → pr₁ X ≡ e
  e-unique (e' , lId , rId , linv , rinv) =
    gp-lId e' ^ ∘ rId e

  {- The inverse of an element is unique -}
  inv-unique : (a : carrier) → (X : Σ[ b ∈ carrier ] (
               (op b a ≡ e) ×
               (op a b ≡ e)))
               → pr₁ X ≡ (a ^ᵍ)
  inv-unique a (b , p , q) =
    gp-lId b ^ ∘
    transport (λ P → op P b ≡ (a ^ᵍ)) (gp-lInv a)
      (gp-assoc (a ^ᵍ) a b ∘
      transport (λ P → op (a ^ᵍ) P ≡ (a ^ᵍ)) (q ^)
        (gp-rId (a ^ᵍ)) )

  {- inverse is an involution -}
  inv-involution : (a : carrier)
                   → (a ^ᵍ ) ^ᵍ ≡ a
  inv-involution a =
    inv-unique
      (a ^ᵍ)
      (a ,
      ((gp-rInv a) ,
       (gp-lInv a))) ^

  inv-of-prod : (a b : carrier)
                → (a og b) ^ᵍ ≡ (b ^ᵍ) og (a ^ᵍ)
  inv-of-prod a b =
    inv-unique
      (a og b)
      ((b ^ᵍ) og (a ^ᵍ) ,
      gp-assoc (b ^ᵍ) (a ^ᵍ) (a og b) ∘
        ap (λ z → op (b ^ᵍ) z) (gp-assoc (a ^ᵍ) a b ^) ∘
        ap (λ z → op (b ^ᵍ) (op z b)) (gp-lInv a) ∘
        ap (λ z → op (b ^ᵍ) z) (gp-lId b) ∘
        gp-lInv b ,
      gp-assoc a b ((b ^ᵍ) og (a ^ᵍ)) ∘
        ap (λ z → op a z) (gp-assoc b (b ^ᵍ) (a ^ᵍ) ^) ∘
        ap (λ z → op a (op z (a ^ᵍ))) (gp-rInv b) ∘
        ap (λ z → op a z) (gp-lId (a ^ᵍ)) ∘
        gp-rInv a) ^

  {- left and right cancellation laws -}
  gp-lCancel : (a b c : carrier)
               → a og b ≡ a og c
               → b ≡ c
  gp-lCancel a b c p =
    gp-lId b ^ ∘
    (ap (λ z → op z b) (gp-lInv a) ^ ∘
    (gp-assoc (a ^ᵍ) a b ∘
    ap (λ z → op (a ^ᵍ) z) p ∘
    gp-assoc (a ^ᵍ) a c ^) ∘
    ap (λ z → op z c) (gp-lInv a)) ∘
    gp-lId c

  gp-rCancel : (a b c : carrier)
               → b og a ≡ c og a
               → b ≡ c
  gp-rCancel a b c p =
    gp-rId b ^ ∘
    (ap (λ z → b og z) (gp-rInv a)) ^ ∘
    gp-assoc b a (a ^ᵍ) ^ ∘
    ap (λ z → op z (a ^ᵍ)) p ∘
    gp-assoc c a (a ^ᵍ) ∘
    ap (λ z → op c z) (gp-rInv a) ∘
    gp-rId c
#+end_src

# Local Variables:
# eval: (message "foo")
# End:


