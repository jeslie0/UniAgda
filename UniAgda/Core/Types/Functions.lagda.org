#+title: Functions
#+author: James Leslie
#+STARTUP: noindent hideblocks latexpreview
* Prelude
#+begin_src agda2
{-# OPTIONS --without-K --no-import-sorts --safe #-}
module UniAgda.Core.Types.Functions where

open import UniAgda.Core.Types.Universes
#+end_src
* Functions
Agda introduces most of the required function types already. This means we don't need to define \(\Pi\) types or \(\to\) types, just their basic operations.
#+name:Exercise1.i1
#+begin_src agda2
_o_ : ∀ {i₁ i₂ i₃} {A : Type i₁} {B : Type i₂} {C : Type i₃}
      (g : B → C) (f : A → B)
      → A → C
(g o f) a = g (f a)
infixr 9 _o_
#+end_src
#+begin_src agda2
id : ∀ {i} {A : Type i}
     → A → A
id a = a
#+end_src

We introduce Haskell notation for function application.
#+begin_src agda2
_$_ : ∀ {i j} {A : Type i} {B : Type j}
     → (A → B) → A → B
f $ a = f a
infixr 0 _$_
#+end_src
