#+title: Properties of Sets
#+author: James Leslie
#+STARTUP: noindent latexpreview
* Prelude
#+begin_src agda2
{-# OPTIONS --without-K #-}
module UniAgda.Core.SetsAndLogic.Sets where

open import UniAgda.Core.Types.Universes
open import UniAgda.Core.Types.Functions
open import UniAgda.Core.Types.Identity
open import UniAgda.Core.Types.Sigma
open import UniAgda.Core.Types.Coproduct
open import UniAgda.Core.Types.W
open import UniAgda.Core.Types.Unit
open import UniAgda.Core.Types.Empty
open import UniAgda.Core.Types.Bool
open import UniAgda.Core.Types.Nat

open import UniAgda.Core.PathAlgebra
open import UniAgda.Core.Homotopy
open import UniAgda.Core.Equivalences
open import UniAgda.Core.SetsAndLogic.ContPropSet1Type

open import UniAgda.Core.PathSpaces.Coproduct
open import UniAgda.Core.PathSpaces.Identity
open import UniAgda.Core.PathSpaces.Nat
open import UniAgda.Core.PathSpaces.Sigma
open import UniAgda.Core.PathSpaces.Unit

open import UniAgda.Core.Axioms
open import UniAgda.Core.SetsAndLogic.Props
#+end_src
* Products of sets are sets
The product of two sets is also a set.
#+name: Example 3.1.5
#+begin_src agda2
Sigma-of-sets-is-set : ∀ {i j} {A : Type i} {B : A → Type j}
                       → (isSet A) → ((x : A) → isSet (B x))
                       → isSet (Σ[ x ∈ A ] B x)
Sigma-of-sets-is-set {B = B} H₁ H₂ (a , b) (a' , b') =
  equiv-with-prop
    (thm2-7-2 ^ᵉ)
    λ { (p1 , p2) (q1 , q2) → path-equiv-sigma
      ((H₁ a a' p1 q1 ,
      H₂ a' (transport B q1 b) b' (transport (λ z → transport B z b ≡ b') (H₁ a a' p1 q1) p2) q2))}

prod-of-sets-is-set : ∀ {i j} {A : Type i} {B : Type j}
                      → (isSet A) → (isSet B)
                      → (isSet (A × B))
prod-of-sets-is-set H₁ H₂ = Sigma-of-sets-is-set H₁ λ x → H₂
#+end_src
* Function types between sets are sets
#+name: Example3.1.6
#+begin_src agda2
fibs-are-sets-PI-is-set : ∀ {i j} {A : Type i} {B : A → Type j}
                          → ((x : A) → (isSet (B x)))
                          → (isSet ((x : A) → B x))
fibs-are-sets-PI-is-set H f g =
  equiv-with-prop
    (funextD-equiv ^ᵉ)
    λ { X Y → funextD λ a →
      H a (f a) (g a) (X a) (Y a)}


func-of-sets-is-set : ∀ {i j} {A : Type i} {B : Type j}
                      → (isSet B)
                      → (isSet (A → B))
func-of-sets-is-set H =
  fibs-are-sets-PI-is-set λ x → H
#+end_src
* Sets are 1-Types
#+name: Lemma3.1.8
#+begin_src agda2
private
  helper : ∀ {i} {A : Type i}
           → (f : isSet {i} A) → (x y : A) → (p q q' : x ≡ y) → (r : q ≡ q')
           → (f x y p q) ∘ r ≡ f x y p q'
  helper f x y p q q' r = (lemma2-11-2i _ r (f x y p q) ^ ) ∘ apD (λ q → f x y p q) r


sets-are-1types : ∀ {i} {A : Type i}
                  → isSet {i} A → is1type {i} A
sets-are-1types f x y p q r s = pq=r-to-q=p^r (f x y p p) r (f x y p q) (helper f x y p p q r) ∘ (pq=r-to-q=p^r (f x y p p) s (f x y p q) (helper f x y p p q s)) ^
#+end_src  
* Results
#+begin_src agda2
isSet-is-prop : {i : Level}
                (A : Type i)
                → isProp (isSet A)
isSet-is-prop A f g = funextD λ {x → funextD λ x₁ → funextD λ x₂ → funextD λ x₃ → sets-are-1types f _ _ _ _ _ _}
#+end_src

Being a set is preserved by equivalence.
#+begin_src agda2
equiv-with-set : ∀ {i j} {A : Type i} {B : Type j}
                 → A ≃ B → isSet A
                 → isSet B
equiv-with-set (f , g , α , β , γ) F x y =
  equiv-with-prop {_} {_} {g x ≡ g y} {x ≡ y}
    (((ap g) ,
      (thm2-11-1 (isequiv-adjointify (f , (α , β))))) ^ᵉ)
    (F (g x) (g y))
#+end_src

If a type family has fibres valued in props and comes from a set, the total space is a set.
#+begin_src agda2
prop-fibres-totalspace-set : ∀ {i j} {A : Type i} {P : A → Type j}
                             → isSet A → ((a : A) → isProp (P a))
                             → isSet (Σ[ a ∈ A ] (P a))
prop-fibres-totalspace-set {i} {j} {A} {P} H f (a , X) (b , Y) =
  equiv-with-prop
  (thm2-7-2 ^ᵉ)
  (λ { (p , p') (q , q') →
    path-equiv-sigma
      ((H _ _ _ _) ,
      (props-are-sets (f b) _ _ _ _))})
#+end_src

* Unit is a set
The unit type is a set.
#+name: Example3.1.2
#+begin_src agda2
unit-is-set : isSet Unit
unit-is-set = props-are-sets λ { tt tt → refl}
#+end_src  
* Empty is a set
The empty type is a set
#+name: Example3.1.3
#+begin_src agda2
empty-is-set : isSet Empty
empty-is-set () y
#+end_src
* The natural numbers are a set
The natural numbers are a set, as their path space is either contractible or empty.
#+name: Example3.1.4
#+begin_src agda2
ℕ-is-set : isSet ℕ
ℕ-is-set zero zero = equiv-with-prop (thm2-13-1 zero zero ^ᵉ) Unit-is-prop
ℕ-is-set zero (suc m) = equiv-with-prop (thm2-13-1 zero (suc m) ^ᵉ) λ x ()
ℕ-is-set (suc n) zero = equiv-with-prop (thm2-13-1 (suc n) zero ^ᵉ) λ x ()
ℕ-is-set (suc n) (suc m) = equiv-with-prop (thm2-13-1 (suc n) (suc m) ^ᵉ) (equiv-with-prop (thm2-13-1 n m) (ℕ-is-set n m))
-- #+end_src
