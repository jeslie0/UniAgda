#+title: Contractability, Propositions, Sets and 1-types
#+author: James Leslie
#+STARTUP: noindent hideblocks latexpreview
* Prelude
#+begin_src agda2 :tangle yes
{-# OPTIONS --without-K --safe #-}
module UniAgda.Core.SetsAndLogic.ContPropSet1Type where

open import UniAgda.Core.Types.Universes
open import UniAgda.Core.Types.Identity
open import UniAgda.Core.Types.Sigma
#+end_src
* Definition
** Contractible Types
A contractible type is one which has a point and a path from every other point to that point.
#+name: Definition3.11.1
#+begin_src agda2 :tangle yes
isContr : ∀ {i}
          (A : Type i)
           → Type i
isContr A = Σ[ a ∈ A ] ((x : A) → a ≡ x)
#+end_src
** Propositions
A proposition is a type with a path between any two terms.
#+name: Definition3.3.1
#+begin_src agda2 :tangle yes
isProp : ∀ {i}
         (A : Type i)
         → Type i
isProp A = (x y : A) → x ≡ y
#+end_src

We define the type of propositions to be the Sigma type of types that are propositions.
#+begin_src agda2 :tangle yes
Prop_ : (i : Level)
        → Type (lsuc i)
Prop i =  Σ[ A ∈ Type i ] (isProp A)
#+end_src
** Sets
A set is a type with all path spaces propositions.
#+name: Definition3.1.1
#+begin_src agda2 :tangle yes
isSet : ∀ {i}
        (A : Type i)
        → Type i
isSet A = (x y : A) (p q : x ≡ y) → p ≡ q
#+end_src

#+begin_src agda2 :tangle yes
sets-have-prop-ids : ∀ {i}
                     (A : Type i) → isSet A
                     → (x y : A) → isProp (x ≡ y)
sets-have-prop-ids A H x y = H x y
#+end_src
A set is then a type with a proof that it is a set. This is how we define the type of sets.
#+begin_src agda2 :tangle yes
Set_ : (i : Level)
       → Type (lsuc i)
Set_ i = Σ[ A ∈ Type i ] (isSet A)
#+end_src
** 1-Types
We can extend this higher and we get a tower of \(n\)-types. We just define 1-types here.
#+name: Definition3.1.7
#+begin_src agda2 :tangle yes
is1type : ∀ {i}
          (A : Type i)
          → Type i
is1type A = (a b : A) → isSet (a ≡ b)
#+end_src
