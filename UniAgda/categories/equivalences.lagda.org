#+title: Equivalences of Categories
* Prelude
#+begin_src agda2
{-# OPTIONS --without-K #-}
module UniAgda.categories.equivalences where

open import UniAgda.categories.category public
open import UniAgda.categories.functor
open import UniAgda.categories.functorcat
open import UniAgda.categories.natural-transformation public
open import UniAgda.categories.adjunctions public
#+end_src
* Definition
#+begin_src agda2
record isCatEquiv {i j k l : Level} {A : Precategory i j} {B : Precategory k l}
       (F : Functor A B)
       : Type (i ⊔ j ⊔ k ⊔ l) where
  eta-equality
  module A = Precategory A
  module B = Precategory B
  module F = Functor F
  field
    adj : isLeftAdjoint F

  module adj = isLeftAdjoint adj

  field
    unit-is-iso : (a : A.ob) → A.isIso (adj.unit.α-ob a)
    counit-is-iso : (b : B.ob) → B.isIso (adj.counit.α-ob b)
#+end_src
** Sigma version
#+begin_src agda2
isCatEquiv-sig : ∀ {i j k l} {A : Precategory i j} {B : Precategory k l}
                 (F : Functor A B)
                 → Type (i ⊔ j ⊔ k ⊔ l)
isCatEquiv-sig {A = A} {B = B} F =
  Σ[ adj ∈ (isLeftAdjoint F) ] (
    let module F = Functor F in
    let module A = Precategory A in
    let module B = Precategory B in
    let module adj = isLeftAdjoint adj in
    Σ[ unit-is-iso ∈ ((a : A.ob) → A.isIso (adj.unit.α-ob a)) ] (
      (b : B.ob) → B.isIso (adj.counit.α-ob b)))

isCatEquiv-sig→rec : ∀ {i j k l} {A : Precategory i j} {B : Precategory k l} {F : Functor A B}
                     → isCatEquiv-sig F → isCatEquiv F
isCatEquiv.adj (isCatEquiv-sig→rec eqv) = pr₁ eqv
isCatEquiv.unit-is-iso (isCatEquiv-sig→rec eqv) = pr₁ (pr₂ eqv)
isCatEquiv.counit-is-iso (isCatEquiv-sig→rec eqv) = pr₂ (pr₂ eqv)

isCatEquiv-rec→sig : ∀ {i j k l} {A : Precategory i j} {B : Precategory k l} {F : Functor A B}
                     → isCatEquiv F → isCatEquiv-sig F
isCatEquiv-rec→sig eqv =
  let module eqv = isCatEquiv eqv in
  eqv.adj ,
  eqv.unit-is-iso ,
  eqv.counit-is-iso

isCatEquiv-rec→sig→rec : ∀ {i j k l} {A : Precategory i j} {B : Precategory k l} {F : Functor A B}
                         (eqv : isCatEquiv F)
                         → (isCatEquiv-sig→rec {i} {j} {k} {l} {A} {B} {F} o isCatEquiv-rec→sig) eqv ≡ eqv
isCatEquiv-rec→sig→rec eqv = refl

isCatEquiv-sig→rec→sig : ∀ {i j k l} {A : Precategory i j} {B : Precategory k l} {F : Functor A B}
                         (eqv : isCatEquiv-sig F)
                         → (isCatEquiv-rec→sig o isCatEquiv-sig→rec) eqv ≡ eqv
isCatEquiv-sig→rec→sig eqv =
  path-equiv-sigma (refl ,
    (path-equiv-sigma (refl ,
      refl)))

isCatEquiv-sig-Equiv : ∀ {i j k l} {A : Precategory i j} {B : Precategory k l} {F : Functor A B}
                       → isCatEquiv-sig F ≃ isCatEquiv F
isCatEquiv-sig-Equiv = equiv-adjointify
  (isCatEquiv-sig→rec ,
  isCatEquiv-rec→sig ,
  isCatEquiv-rec→sig→rec ,
  isCatEquiv-sig→rec→sig)
#+end_src
